---
- name: Ensures {{ airflow_policies_dir }} exists
  become: yes
  become_user: root
  file:
    path: "{{ airflow_policies_dir }}"
    state: directory
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    mode: "0755"
    recurse: yes

- name: Template airflow_local_settings.py file
  template:
    src: airflow_local_settings.py.j2
    dest: "{{ airflow_policies_dir }}/airflow_local_settings.py"

- name: Create symbolic link to airflow_local_settings.py
  file:
    src: "{{ airflow_policies_dir }}/airflow_local_settings.py"
    dest: "{{ airflow_conf_dir }}/airflow_local_settings.py"
    state: link

- name: Template Airflow webserver service file
  template:
    src: airflow-webserver.service.j2
    dest: /usr/lib/systemd/system/airflow-webserver.service
  
- name: Airflow Database Init
  shell: "{{ airflow_executable }} db init"

- name: Create roles
  command: "{{ airflow_executable }} roles create {{ item }}"
  with_items: "{{ airflow_extra_roles }}"

- name: Assign permissions to roles
  command: "{{ airflow_executable }} roles add-perms {{ airflow_extra_roles|join(' ') }} -r '{{ item.resource }}' -a {{ item.actions|join(' ') }}"
  with_items: "{{ airflow_roles_base_permissions }}"

- name: Airflow | Delete connections
  command: "{{ airflow_executable }} connections delete {{ item.conn_id }}"
  with_items: "{{ airflow_connections }}"
  when: airflow_connections_reset
  ignore_errors: true

- name: Airflow | Add connections
  shell: >
    "{{ airflow_executable }}" connections add {{ item.conn_id }}
    {%- for key, value in item.items() if key != 'conn_id' %}
    --{{ key }} {{ value }}
    {%- endfor %}
  with_items: "{{ airflow_connections }}"
  ignore_errors: true